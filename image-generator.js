// QUANTY IMAGE GENERATOR - LLAMA 4 MAVERICK & MISTRAL SMALL 3.1
console.log('🎨 LOADING IMAGE GENERATOR...');

// Check if request is for image generation
function isImageGenerationRequest(message) {
  const lowerMessage = message.toLowerCase();
  
  const imageKeywords = [
    'generate image',
    'create image',
    'make image',
    'draw image',
    'create a design',
    'make a design',
    'generate design',
    'design something',
    'create artwork',
    'make artwork'
  ];
  
  const designPrefix = lowerMessage.startsWith('design:');
  const hasImageKeywords = imageKeywords.some(keyword => lowerMessage.includes(keyword));
  
  return designPrefix || hasImageKeywords;
}

// Generate image via backend
async function generateImage(prompt) {
  console.log('🎨 STARTING IMAGE GENERATION');
  
  try {
    // Extract the actual prompt
    let imagePrompt = prompt;
    
    // Remove prefixes
    if (prompt.toLowerCase().startsWith('design:')) {
      imagePrompt = prompt.substring(7).trim();
    } else {
      // Remove common prefixes
      const prefixes = [
        'generate image of',
        'create image of',
        'make image of',
        'draw image of',
        'generate image',
        'create image',
        'make image',
        'draw image',
        'create a design of',
        'make a design of',
        'create a design',
        'make a design',
        'generate design of',
        'generate design',
        'create artwork of',
        'make artwork of',
        'create artwork',
        'make artwork'
      ];
      
      for (const prefix of prefixes) {
        if (imagePrompt.toLowerCase().startsWith(prefix)) {
          imagePrompt = imagePrompt.substring(prefix.length).trim();
          break;
        }
      }
    }
    
    if (!imagePrompt) {
      return '🎨 **Image Generation Error**\\n\\nPlease provide a description for the image you want to generate.\\n\\n**Example:** "generate image of a sunset over mountains"';
    }
    
    // Show processing message
    const processingMessage = `🎨 **Generating Image...**\\n\\n📝 **Prompt:** ${imagePrompt}\\n\\n⏳ Creating your image with AI...\\n\\n*This may take a few moments*`;
    
    // Call backend API
    const response = await fetch('/api/generate-image', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ prompt: imagePrompt })
    });
    
    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.error || 'Failed to generate image');
    }
    
    const data = await response.json();
    
    // Format the response
    const formattedResponse = `🎨 **Image Generated Successfully!**\\n\\n📝 **Prompt:** ${imagePrompt}\\n\\n🖼️ **Image URL:** ${data.imageUrl}\\n\\n**Model Used:** ${data.model}\\n\\n**Generation Time:** ${data.generationTime || 'N/A'}\\n\\n---\\n\\n*Image generated by Quanty AI using ${data.model}*`;
    
    console.log('✅ IMAGE GENERATION COMPLETE');
    return formattedResponse;
    
  } catch (error) {
    console.error('❌ IMAGE GENERATION ERROR:', error);
    
    // Return error message with helpful suggestions
    return `❌ **Image Generation Failed**\\n\\n**Error:** ${error.message}\\n\\n**Possible Solutions:**\\n• Try a more detailed description\\n• Use simpler language in your prompt\\n• Check your internet connection\\n• Try again in a few moments\\n\\n**Supported Formats:**\\n• "generate image of [description]"\\n• "create a design of [description]"\\n• "design: [description]"\\n\\n**Example Prompts:**\\n• "generate image of a futuristic city at night"\\n• "create a design of a modern logo"\\n• "design: abstract art with blue and gold colors"\\n\\n*Please try again with a different prompt.*`;
  }
}

// Enhanced image generation detection
function detectImageRequest(text) {
  const imagePatterns = [
    /generate\\s+image/i,
    /create\\s+image/i,
    /make\\s+image/i,
    /draw\\s+image/i,
    /create\\s+a?\\s*design/i,
    /make\\s+a?\\s*design/i,
    /generate\\s+design/i,
    /design\\s*:/i,
    /create\\s+artwork/i,
    /make\\s+artwork/i,
    /generate\\s+art/i,
    /create\\s+art/i
  ];
  
  return imagePatterns.some(pattern => pattern.test(text));
}

// Process message for image generation
function processMessageForImages(message) {
  if (detectImageRequest(message)) {
    console.log('🎨 IMAGE GENERATION REQUEST DETECTED:', message);
    return true;
  }
  
  return false;
}

// Make functions globally available
window.isImageGenerationRequest = isImageGenerationRequest;
window.generateImage = generateImage;
window.detectImageRequest = detectImageRequest;
window.processMessageForImages = processMessageForImages;

console.log('🎨 IMAGE GENERATOR READY');
console.log('🤖 Models: LLaMA 4 Maverick, Mistral Small 3.1');
console.log('🎯 Triggers: "generate image", "create design", "design:"');